// Code generated by MockGen. DO NOT EDIT.
// Source: go.lumeweb.com/etcd-registry/types (interfaces: Registry)
//
// Generated by this command:
//
//	mockgen -package=types -destination=mock_registry.go go.lumeweb.com/etcd-registry/types Registry
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"
	time "time"

	clientv3 "go.etcd.io/etcd/client/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
	isgomock struct{}
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// DeleteNode mocks base method.
func (m *MockRegistry) DeleteNode(ctx context.Context, groupName string, node Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, groupName, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockRegistryMockRecorder) DeleteNode(ctx, groupName, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockRegistry)(nil).DeleteNode), ctx, groupName, node)
}

// GetClient mocks base method.
func (m *MockRegistry) GetClient() *clientv3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*clientv3.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRegistryMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRegistry)(nil).GetClient))
}

// GetEtcdBasePath mocks base method.
func (m *MockRegistry) GetEtcdBasePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtcdBasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEtcdBasePath indicates an expected call of GetEtcdBasePath.
func (mr *MockRegistryMockRecorder) GetEtcdBasePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtcdBasePath", reflect.TypeOf((*MockRegistry)(nil).GetEtcdBasePath))
}

// GetNodes mocks base method.
func (m *MockRegistry) GetNodes(ctx context.Context, groupPath string) ([]Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, groupPath)
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockRegistryMockRecorder) GetNodes(ctx, groupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockRegistry)(nil).GetNodes), ctx, groupPath)
}

// NodePath mocks base method.
func (m *MockRegistry) NodePath(groupName string, node Node) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodePath", groupName, node)
	ret0, _ := ret[0].(string)
	return ret0
}

// NodePath indicates an expected call of NodePath.
func (mr *MockRegistryMockRecorder) NodePath(groupName, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePath", reflect.TypeOf((*MockRegistry)(nil).NodePath), groupName, node)
}

// RegisterNodeWithRetry mocks base method.
func (m *MockRegistry) RegisterNodeWithRetry(ctx context.Context, groupName string, node Node, ttl time.Duration, done chan<- struct{}, errChan chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterNodeWithRetry", ctx, groupName, node, ttl, done, errChan)
}

// RegisterNodeWithRetry indicates an expected call of RegisterNodeWithRetry.
func (mr *MockRegistryMockRecorder) RegisterNodeWithRetry(ctx, groupName, node, ttl, done, errChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNodeWithRetry", reflect.TypeOf((*MockRegistry)(nil).RegisterNodeWithRetry), ctx, groupName, node, ttl, done, errChan)
}

// ServicePath mocks base method.
func (m *MockRegistry) ServicePath(groupName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePath", groupName)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServicePath indicates an expected call of ServicePath.
func (mr *MockRegistryMockRecorder) ServicePath(groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePath", reflect.TypeOf((*MockRegistry)(nil).ServicePath), groupName)
}

// WatchGroup mocks base method.
func (m *MockRegistry) WatchGroup(ctx context.Context, groupName string) (<-chan WatchEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchGroup", ctx, groupName)
	ret0, _ := ret[0].(<-chan WatchEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchGroup indicates an expected call of WatchGroup.
func (mr *MockRegistryMockRecorder) WatchGroup(ctx, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchGroup", reflect.TypeOf((*MockRegistry)(nil).WatchGroup), ctx, groupName)
}

// WatchGroupNodes mocks base method.
func (m *MockRegistry) WatchGroupNodes(ctx context.Context, groupName string) (<-chan WatchEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchGroupNodes", ctx, groupName)
	ret0, _ := ret[0].(<-chan WatchEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchGroupNodes indicates an expected call of WatchGroupNodes.
func (mr *MockRegistryMockRecorder) WatchGroupNodes(ctx, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchGroupNodes", reflect.TypeOf((*MockRegistry)(nil).WatchGroupNodes), ctx, groupName)
}

// WatchServices mocks base method.
func (m *MockRegistry) WatchServices(ctx context.Context) (<-chan WatchEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchServices", ctx)
	ret0, _ := ret[0].(<-chan WatchEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchServices indicates an expected call of WatchServices.
func (mr *MockRegistryMockRecorder) WatchServices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchServices", reflect.TypeOf((*MockRegistry)(nil).WatchServices), ctx)
}
